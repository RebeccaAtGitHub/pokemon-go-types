{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","className","style","width","height","defaultColDef","filter","resizable","rowData","Typ","Stark","Verletzbar","field","pinned","lockPinned","sortable","headerName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAgDeA,EA1CH,WAsBT,OACI,qBAAKC,UAAU,kBAAkBC,MAAQ,CAAEC,MAAO,OAAQC,OAAQ,SAAlE,SACI,eAAC,cAAD,CACKC,cAAe,CACXC,QAAQ,EACRC,WAAW,GAEfL,MAAO,CACHC,MAAO,OACPC,OAAQ,SAEZI,QAhCG,CACb,CAACC,IAAK,QAASC,MAAO,uCAAwCC,WAAY,wBAC1E,CAACF,IAAK,SAAUC,MAAO,SAAUC,WAAY,oBAC7C,CAACF,IAAK,MAAOC,MAAO,+BAAgCC,WAAY,gCAChE,CAACF,IAAK,UAAWC,MAAO,eAAgBC,WAAY,SACpD,CAACF,IAAK,MAAOC,MAAO,yBAA0BC,WAAY,eAC1D,CAACF,IAAK,QAASC,MAAO,gCAA8BC,WAAY,0BAChE,CAACF,IAAK,OAAQC,MAAO,2BAAyBC,WAAY,yBAC1D,CAACF,IAAK,QAASC,MAAO,gBAAiBC,WAAY,kBACnD,CAACF,IAAK,UAAWC,MAAO,6BAA2BC,WAAY,wCAC/D,CAACF,IAAK,OAAQC,MAAO,eAAgBC,WAAY,iBACjD,CAACF,IAAK,WAASC,MAAO,2BAA4BC,WAAY,wBAC9D,CAACF,IAAK,QAASC,MAAO,uCAAwCC,WAAY,qBAC1E,CAACF,IAAK,SAAUC,MAAO,GAAIC,WAAY,SACvC,CAACF,IAAK,UAAWC,MAAO,yBAA0BC,WAAY,oCAC9D,CAACF,IAAK,SAAUC,MAAO,cAAeC,WAAY,4BAClD,CAACF,IAAK,QAASC,MAAO,oBAAqBC,WAAY,uBACvD,CAACF,IAAK,UAAWC,MAAO,gBAAiBC,WAAY,wBACrD,CAACF,IAAK,SAAUC,MAAO,wBAAyBC,WAAY,qBAKvD,UAUI,cAAC,eAAD,CAAcC,MAAM,MAAMC,OAAO,OAAOC,YAAa,EAAOX,MAAO,IAAKY,UAAW,IACnF,cAAC,eAAD,CAAcH,MAAM,QAAQI,WAAW,gBACvC,cAAC,eAAD,CAAcJ,MAAM,aAAaI,WAAW,yBC9B5CC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6cf1f64f.chunk.js","sourcesContent":["import React from 'react';\nimport {AgGridColumn, AgGridReact} from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nconst App = () => {\n   const rowData = [\n      {Typ: \"Boden\", Stark: \"Gift, Gestein, Stahl, Feuer, Elektro\", Verletzbar: \"Wasser, Pflanze, Eis\"},\n      {Typ: \"Drache\", Stark: \"Drache\", Verletzbar: \"Eis, Drache, Fee\"},\n      {Typ: \"Eis\", Stark: \"Flug, Boden, Pflanze, Drache\", Verletzbar: \"Kampf, Gestein, Stahl, Feuer\"},\n      {Typ: \"Elektro\", Stark: \"Flug, Wasser\", Verletzbar: \"Boden\"},\n      {Typ: \"Fee\", Stark: \"Kampf, Drache, Unlicht\", Verletzbar: \"Gift, Stahl\"},\n      {Typ: \"Feuer\", Stark: \"Käfer, Stahl, Pflanze, Eis\", Verletzbar: \"Boden, Gestein, Wasser\"},\n      {Typ: \"Flug\", Stark: \"Kampf, Käfer, Pflanze\", Verletzbar: \"Gestein, Elektro, Eis\"},\n      {Typ: \"Geist\", Stark: \"Geist, Psycho\", Verletzbar: \"Geist, Unlicht\"},\n      {Typ: \"Gestein\", Stark: \"Flug, Käfer, Feuer, Eis\", Verletzbar: \"Kampf, Boden, Stahl, Wasser, Pflanze\"},\n      {Typ: \"Gift\", Stark: \"Pflanze, Fee\", Verletzbar: \"Boden, Psycho\"},\n      {Typ: \"Käfer\", Stark: \"Pflanze, Psycho, Unlicht\", Verletzbar: \"Flug, Gestein, Feuer\"},\n      {Typ: \"Kampf\", Stark: \"Normal, Gestein, Stahl, Eis, Unlicht\", Verletzbar: \"Flug, Psycho, Fee\"},\n      {Typ: \"Normal\", Stark: \"\", Verletzbar: \"Kampf\"},\n      {Typ: \"Pflanze\", Stark: \"Boden, Gestein, Wasser\", Verletzbar: \"Flug, Gift, Käfer, Feuer, Eis\"},\n      {Typ: \"Psycho\", Stark: \"Kampf, Gift\", Verletzbar: \"Käfer, Geist, Unlicht\"},\n      {Typ: \"Stahl\", Stark: \"Gestein, Eis, Fee\", Verletzbar: \"Kampf, Boden, Feuer\"},\n      {Typ: \"Unlicht\", Stark: \"Geist, Psycho\", Verletzbar: \"Kampf, Käfer, Fee\"},\n      {Typ: \"Wasser\", Stark: \"Boden, Gestein, Feuer\", Verletzbar: \"Pflanze, Elektro\"}\n   ];\n\n   return (\n       <div className=\"ag-theme-alpine\" style= {{ width: '100%', height: '100vh' }} >\n           <AgGridReact \n                defaultColDef={{\n                    filter: true,\n                    resizable: true,\n                }}\n                style={{ \n                    width: '100%', \n                    height: '100%;', \n                }}\n                rowData={rowData}>\n               <AgGridColumn field=\"Typ\" pinned=\"left\" lockPinned={ true } width={100} sortable={ true }></AgGridColumn>\n               <AgGridColumn field=\"Stark\" headerName=\"Stark gegen\"></AgGridColumn>\n               <AgGridColumn field=\"Verletzbar\" headerName=\"Verletzbar von\"></AgGridColumn>\n           </AgGridReact>\n       </div>\n   );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}